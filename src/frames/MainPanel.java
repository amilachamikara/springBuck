/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import api.AudioFileTagger;
import api.LibraryManager;
import api.MediaListener;
import api.Notification;
import api.WindowsAudioPlaybackWatcher;
import com.jniwrapper.win32.ui.Wnd;
import com.sun.java.swing.plaf.windows.WindowsLookAndFeel;
import java.awt.CardLayout;
import java.awt.CheckboxMenuItem;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Menu;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.Socket;
import java.net.URL;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author Amila Chamikara
 */
public class MainPanel extends javax.swing.JFrame implements MediaListener {

    private CardLayout crdLayout;
    Font f;
    int userId = 0;
    DefaultListModel dlm;
    DefaultTableModel dtm;
    int libraryId = 0;
    JFileChooser fileChooser = new JFileChooser();
    public static String fileList = new String();
    String username;
    private String rssLink;
    private Boolean isRssNotify;
    private Boolean isCommunityNotify;
    DefaultTableModel playlistModel = new DefaultTableModel();
    private File imageFile;
    /**
     * Creates new form MainPanel
     */
    public MainPanel() {
        initComponents();
        crdLayout = (CardLayout) pnl_body.getLayout();
        new WindowsAudioPlaybackWatcher().addListener(this);
        lbl_loader.setVisible(false);

    }

    MainPanel(String un) {
        username = un;
        initComponents();
        userId = getUserId(un);
        crdLayout = (CardLayout) pnl_body.getLayout();
        new WindowsAudioPlaybackWatcher().addListener(this);
        lbl_loader.setVisible(false);
        loadSettings();
        loadCurrentPlaylist();
        makeSystemTray();
        loadPlaylistPopup(playlistModel);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrp_navi = new javax.swing.ButtonGroup();
        eq_label = new javax.swing.JLabel();
        pnl_body = new javax.swing.JPanel();
        pnl_current = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_playlist = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        pnl_libraries = new javax.swing.JPanel();
        btn_crt_lib = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_folders = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        lst_library = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        btn_addFldr = new javax.swing.JButton();
        btn_rmv_lib = new javax.swing.JButton();
        btn_rmv_fldr = new javax.swing.JButton();
        lbl_loader = new javax.swing.JLabel();
        txt_file = new javax.swing.JLabel();
        pnl_timeslot = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tbl_timeslots = new javax.swing.JTable();
        pnl_statistics = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lst_bgapps = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        txt_nowplaying = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        cmb_summary = new javax.swing.JComboBox();
        jScrollPane7 = new javax.swing.JScrollPane();
        tbl_summary = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        pnl_tageditor = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txt_mp3FilePath = new javax.swing.JTextField();
        txt_title = new javax.swing.JTextField();
        txt_artist = new javax.swing.JTextField();
        txt_album = new javax.swing.JTextField();
        txt_composer = new javax.swing.JTextField();
        txt_year = new javax.swing.JTextField();
        slider_ratings = new javax.swing.JSlider();
        jButton5 = new javax.swing.JButton();
        lbl_cover = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        txt_genre = new javax.swing.JTextField();
        pnl_settings = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txt_backup_path = new javax.swing.JTextField();
        jButton14 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        txt_restore_path = new javax.swing.JTextField();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        pnl_applications = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbl_applist = new javax.swing.JTable();
        btn_add = new javax.swing.JButton();
        btn_remove = new javax.swing.JButton();
        btn_up = new javax.swing.JButton();
        btn_down = new javax.swing.JButton();
        pnl_preferences = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        txt_rsslink = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        chk_rss = new javax.swing.JCheckBox();
        chk_comm = new javax.swing.JCheckBox();
        pnl_navigator = new javax.swing.JPanel();
        jXTaskPaneContainer1 = new org.jdesktop.swingx.JXTaskPaneContainer();
        jXTaskPane3 = new org.jdesktop.swingx.JXTaskPane();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton10 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jXTaskPane2 = new org.jdesktop.swingx.JXTaskPane();
        jToggleButton4 = new javax.swing.JToggleButton();
        jToggleButton5 = new javax.swing.JToggleButton();
        jXTaskPane1 = new org.jdesktop.swingx.JXTaskPane();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton7 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton8 = new javax.swing.JToggleButton();
        jToggleButton6 = new javax.swing.JToggleButton();
        jButton11 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Media Organizing Tool");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        eq_label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/equalizer1.gif"))); // NOI18N
        getContentPane().add(eq_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 60, 300, 30));

        pnl_body.setMaximumSize(new java.awt.Dimension(710, 440));
        pnl_body.setOpaque(false);
        pnl_body.setPreferredSize(new java.awt.Dimension(710, 440));
        pnl_body.setRequestFocusEnabled(false);
        pnl_body.setLayout(new java.awt.CardLayout());

        pnl_current.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Playlist"));
        pnl_current.setOpaque(false);

        tbl_playlist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File Name", "Title", "Frequency"
            }
        ));
        jScrollPane1.setViewportView(tbl_playlist);

        jButton9.setText("Open in KMP");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_currentLayout = new javax.swing.GroupLayout(pnl_current);
        pnl_current.setLayout(pnl_currentLayout);
        pnl_currentLayout.setHorizontalGroup(
            pnl_currentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_currentLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(pnl_currentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton9)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        pnl_currentLayout.setVerticalGroup(
            pnl_currentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_currentLayout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addComponent(jButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pnl_body.add(pnl_current, "card2");

        pnl_libraries.setBorder(javax.swing.BorderFactory.createTitledBorder("My Libraries"));
        pnl_libraries.setOpaque(false);

        btn_crt_lib.setText("Create Library");
        btn_crt_lib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_crt_libActionPerformed(evt);
            }
        });

        jLabel3.setText("Library list:");

        tbl_folders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Folder path", "Folder_ID", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbl_folders);

        lst_library.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lst_libraryMouseClicked(evt);
            }
        });
        lst_library.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lst_libraryValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(lst_library);

        jLabel4.setText("Folder list:");

        btn_addFldr.setText("Add Folder");
        btn_addFldr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addFldrActionPerformed(evt);
            }
        });

        btn_rmv_lib.setText("Remove Library");
        btn_rmv_lib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_rmv_libActionPerformed(evt);
            }
        });

        btn_rmv_fldr.setText("Remove Folder");
        btn_rmv_fldr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_rmv_fldrActionPerformed(evt);
            }
        });

        lbl_loader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/loader.gif"))); // NOI18N
        lbl_loader.setText("Wait...");

        javax.swing.GroupLayout pnl_librariesLayout = new javax.swing.GroupLayout(pnl_libraries);
        pnl_libraries.setLayout(pnl_librariesLayout);
        pnl_librariesLayout.setHorizontalGroup(
            pnl_librariesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_librariesLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(pnl_librariesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_file, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnl_librariesLayout.createSequentialGroup()
                        .addGroup(pnl_librariesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnl_librariesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_librariesLayout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(pnl_librariesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btn_crt_lib, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btn_addFldr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btn_rmv_lib, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btn_rmv_fldr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(pnl_librariesLayout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addComponent(lbl_loader, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel4))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnl_librariesLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btn_addFldr, btn_crt_lib, btn_rmv_fldr, btn_rmv_lib});

        pnl_librariesLayout.setVerticalGroup(
            pnl_librariesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_librariesLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(pnl_librariesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGroup(pnl_librariesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_librariesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3))
                    .addGroup(pnl_librariesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(pnl_librariesLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(btn_crt_lib)
                        .addGap(18, 18, 18)
                        .addComponent(btn_addFldr)
                        .addGap(18, 18, 18)
                        .addComponent(btn_rmv_lib)
                        .addGap(18, 18, 18)
                        .addComponent(btn_rmv_fldr)
                        .addGap(28, 28, 28)
                        .addComponent(lbl_loader, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 101, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_file, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnl_body.add(pnl_libraries, "card3");

        pnl_timeslot.setBorder(javax.swing.BorderFactory.createTitledBorder("Time Slot Management"));
        pnl_timeslot.setOpaque(false);

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Remove");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tbl_timeslots.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Start time", "End time"
            }
        ));
        jScrollPane6.setViewportView(tbl_timeslots);

        javax.swing.GroupLayout pnl_timeslotLayout = new javax.swing.GroupLayout(pnl_timeslot);
        pnl_timeslot.setLayout(pnl_timeslotLayout);
        pnl_timeslotLayout.setHorizontalGroup(
            pnl_timeslotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_timeslotLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(pnl_timeslotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        pnl_timeslotLayout.setVerticalGroup(
            pnl_timeslotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_timeslotLayout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(283, 283, 283))
            .addGroup(pnl_timeslotLayout.createSequentialGroup()
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnl_body.add(pnl_timeslot, "card4");

        pnl_statistics.setBorder(javax.swing.BorderFactory.createTitledBorder("Statistics"));
        pnl_statistics.setOpaque(false);

        jScrollPane4.setViewportView(lst_bgapps);

        jLabel2.setText("Background App List: ");

        jLabel1.setText("Now Playing :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_nowplaying, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_nowplaying, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Now Playing", jPanel1);

        cmb_summary.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Most Played Songs", "Most Played Artists", "Most Played Genres" }));
        cmb_summary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_summaryActionPerformed(evt);
            }
        });

        tbl_summary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Song", "Frequency"
            }
        ));
        jScrollPane7.setViewportView(tbl_summary);

        jLabel14.setText("Summary: ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmb_summary, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(296, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmb_summary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Distributions", jPanel2);

        javax.swing.GroupLayout pnl_statisticsLayout = new javax.swing.GroupLayout(pnl_statistics);
        pnl_statistics.setLayout(pnl_statisticsLayout);
        pnl_statisticsLayout.setHorizontalGroup(
            pnl_statisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_statisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        pnl_statisticsLayout.setVerticalGroup(
            pnl_statisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_statisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pnl_body.add(pnl_statistics, "card5");

        pnl_tageditor.setBorder(javax.swing.BorderFactory.createTitledBorder("Tag Editor"));
        pnl_tageditor.setToolTipText("");
        pnl_tageditor.setOpaque(false);

        jLabel6.setText("Select File");

        jLabel7.setText("Title");

        jLabel8.setText("Artist");

        jLabel9.setText("Album");

        jLabel10.setText("Genre");

        jLabel11.setText("Composer");

        jLabel12.setText("Year");

        jLabel13.setText("Ratings");

        txt_mp3FilePath.setEditable(false);
        txt_mp3FilePath.setText("F:\\Musics\\English\\04 Taylor Swift - I Knew You Were Trouble.mp3");
        txt_mp3FilePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_mp3FilePathActionPerformed(evt);
            }
        });

        txt_title.setText("I Knew You Were Trouble");

        txt_artist.setText("Taylor Swift");

        txt_album.setText("The Official Uk Top 40 Singles Chart");

        txt_year.setText("2013");

        slider_ratings.setMajorTickSpacing(1);
        slider_ratings.setMaximum(6);
        slider_ratings.setPaintLabels(true);
        slider_ratings.setPaintTicks(true);
        slider_ratings.setSnapToTicks(true);
        slider_ratings.setValue(4);
        slider_ratings.setOpaque(false);

        jButton5.setText("Browse");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        lbl_cover.setIcon(new javax.swing.ImageIcon("C:\\Users\\Amila\\Desktop\\Taylor_Swift_-_Red.png")); // NOI18N
        lbl_cover.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton6.setText("Browse Image");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Save");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Clear All");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_tageditorLayout = new javax.swing.GroupLayout(pnl_tageditor);
        pnl_tageditor.setLayout(pnl_tageditorLayout);
        pnl_tageditorLayout.setHorizontalGroup(
            pnl_tageditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_tageditorLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(pnl_tageditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_tageditorLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(42, 42, 42)
                        .addComponent(txt_mp3FilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnl_tageditorLayout.createSequentialGroup()
                        .addGroup(pnl_tageditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnl_tageditorLayout.createSequentialGroup()
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnl_tageditorLayout.createSequentialGroup()
                                .addGroup(pnl_tageditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13))
                                .addGap(44, 44, 44)
                                .addGroup(pnl_tageditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txt_title)
                                    .addComponent(txt_artist)
                                    .addComponent(txt_album)
                                    .addComponent(txt_composer)
                                    .addComponent(txt_year)
                                    .addComponent(slider_ratings, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                    .addComponent(txt_genre))))
                        .addGroup(pnl_tageditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_tageditorLayout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(lbl_cover, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnl_tageditorLayout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addComponent(jButton6)))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        pnl_tageditorLayout.setVerticalGroup(
            pnl_tageditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_tageditorLayout.createSequentialGroup()
                .addGroup(pnl_tageditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_tageditorLayout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(txt_title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pnl_tageditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txt_artist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnl_tageditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txt_album, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnl_tageditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txt_genre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnl_tageditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(txt_composer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnl_tageditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(txt_year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnl_tageditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(slider_ratings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnl_tageditorLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(pnl_tageditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txt_mp3FilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addGap(37, 37, 37)
                        .addComponent(lbl_cover, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6)))
                .addGap(18, 18, 18)
                .addGroup(pnl_tageditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton8))
                .addContainerGap())
        );

        pnl_body.add(pnl_tageditor, "card6");

        pnl_settings.setBorder(javax.swing.BorderFactory.createTitledBorder("Backup and Restore"));
        pnl_settings.setOpaque(false);

        jButton4.setText("Reset to Default");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel16.setText("Factory default:");

        jLabel17.setText("System backup location:");

        txt_backup_path.setEnabled(false);

        jButton14.setText("Browse");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jLabel18.setText("System restore file path:");

        txt_restore_path.setEnabled(false);

        jButton15.setText("Browse");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setText("Backup");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("Restore");

        javax.swing.GroupLayout pnl_settingsLayout = new javax.swing.GroupLayout(pnl_settings);
        pnl_settings.setLayout(pnl_settingsLayout);
        pnl_settingsLayout.setHorizontalGroup(
            pnl_settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_settingsLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(pnl_settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_settingsLayout.createSequentialGroup()
                        .addGroup(pnl_settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(jLabel16))
                        .addGap(13, 13, 13)
                        .addGroup(pnl_settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_settingsLayout.createSequentialGroup()
                                .addComponent(txt_backup_path, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton4)))
                    .addGroup(pnl_settingsLayout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_restore_path, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton17)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        pnl_settingsLayout.setVerticalGroup(
            pnl_settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_settingsLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(pnl_settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jButton4))
                .addGap(24, 24, 24)
                .addGroup(pnl_settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txt_backup_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton14)
                    .addComponent(jButton16))
                .addGap(24, 24, 24)
                .addGroup(pnl_settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton15)
                    .addComponent(txt_restore_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(jButton17))
                .addContainerGap(265, Short.MAX_VALUE))
        );

        pnl_body.add(pnl_settings, "card7");

        pnl_applications.setBorder(javax.swing.BorderFactory.createTitledBorder("Application Manager"));
        pnl_applications.setOpaque(false);

        tbl_applist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Application Name", "Path"
            }
        ));
        jScrollPane5.setViewportView(tbl_applist);

        btn_add.setText("Add ");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        btn_remove.setText("Remove");
        btn_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_removeActionPerformed(evt);
            }
        });

        btn_up.setText("Up");
        btn_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_upActionPerformed(evt);
            }
        });

        btn_down.setText("Down");
        btn_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_downActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_applicationsLayout = new javax.swing.GroupLayout(pnl_applications);
        pnl_applications.setLayout(pnl_applicationsLayout);
        pnl_applicationsLayout.setHorizontalGroup(
            pnl_applicationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_applicationsLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnl_applicationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_remove, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_up, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_down, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnl_applicationsLayout.setVerticalGroup(
            pnl_applicationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_applicationsLayout.createSequentialGroup()
                .addGroup(pnl_applicationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_applicationsLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnl_applicationsLayout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(btn_add)
                        .addGap(27, 27, 27)
                        .addComponent(btn_remove)
                        .addGap(27, 27, 27)
                        .addComponent(btn_up)
                        .addGap(27, 27, 27)
                        .addComponent(btn_down)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnl_body.add(pnl_applications, "card8");

        pnl_preferences.setBorder(javax.swing.BorderFactory.createTitledBorder("Preferences"));
        pnl_preferences.setOpaque(false);

        jLabel15.setText("RSS feed link:");

        txt_rsslink.setToolTipText("Paste your RSS feed link here..");

        jButton3.setText("Save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton12.setText("Reset");

        chk_rss.setText("RSS Feed Notification");
        chk_rss.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        chk_rss.setOpaque(false);

        chk_comm.setText("Community Suggestions");
        chk_comm.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        chk_comm.setOpaque(false);

        javax.swing.GroupLayout pnl_preferencesLayout = new javax.swing.GroupLayout(pnl_preferences);
        pnl_preferences.setLayout(pnl_preferencesLayout);
        pnl_preferencesLayout.setHorizontalGroup(
            pnl_preferencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_preferencesLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(pnl_preferencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chk_rss)
                    .addGroup(pnl_preferencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(pnl_preferencesLayout.createSequentialGroup()
                            .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnl_preferencesLayout.createSequentialGroup()
                            .addComponent(jLabel15)
                            .addGap(18, 18, 18)
                            .addComponent(txt_rsslink, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(chk_comm))
                .addContainerGap(101, Short.MAX_VALUE))
        );
        pnl_preferencesLayout.setVerticalGroup(
            pnl_preferencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_preferencesLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(pnl_preferencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txt_rsslink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(chk_rss)
                .addGap(18, 18, 18)
                .addComponent(chk_comm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 194, Short.MAX_VALUE)
                .addGroup(pnl_preferencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton12))
                .addGap(42, 42, 42))
        );

        pnl_body.add(pnl_preferences, "card9");

        getContentPane().add(pnl_body, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 89, 710, 440));

        jXTaskPane3.setTitle("Suggestions");

        btngrp_navi.add(jToggleButton1);
        jToggleButton1.setSelected(true);
        jToggleButton1.setText("Current Playlist");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        jXTaskPane3.getContentPane().add(jToggleButton1);

        jButton10.setText("Notify Updates");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jXTaskPane3.getContentPane().add(jButton10);

        jButton13.setText("Community Suggestions");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jXTaskPane3.getContentPane().add(jButton13);

        jXTaskPaneContainer1.add(jXTaskPane3);

        jXTaskPane2.setTitle("Utilities");

        btngrp_navi.add(jToggleButton4);
        jToggleButton4.setText("Statistics");
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });
        jXTaskPane2.getContentPane().add(jToggleButton4);

        btngrp_navi.add(jToggleButton5);
        jToggleButton5.setText("Tag Editor");
        jToggleButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton5ActionPerformed(evt);
            }
        });
        jXTaskPane2.getContentPane().add(jToggleButton5);

        jXTaskPaneContainer1.add(jXTaskPane2);

        jXTaskPane1.setTitle("Settings");

        btngrp_navi.add(jToggleButton2);
        jToggleButton2.setText("My Libraries");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });
        jXTaskPane1.getContentPane().add(jToggleButton2);

        btngrp_navi.add(jToggleButton7);
        jToggleButton7.setText("Applications");
        jToggleButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton7ActionPerformed(evt);
            }
        });
        jXTaskPane1.getContentPane().add(jToggleButton7);

        btngrp_navi.add(jToggleButton3);
        jToggleButton3.setText("Time Slots");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });
        jXTaskPane1.getContentPane().add(jToggleButton3);

        btngrp_navi.add(jToggleButton8);
        jToggleButton8.setText("Preferences");
        jToggleButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton8ActionPerformed(evt);
            }
        });
        jXTaskPane1.getContentPane().add(jToggleButton8);

        btngrp_navi.add(jToggleButton6);
        jToggleButton6.setText("Backup/ Restore");
        jToggleButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton6ActionPerformed(evt);
            }
        });
        jXTaskPane1.getContentPane().add(jToggleButton6);

        jXTaskPaneContainer1.add(jXTaskPane1);

        javax.swing.GroupLayout pnl_navigatorLayout = new javax.swing.GroupLayout(pnl_navigator);
        pnl_navigator.setLayout(pnl_navigatorLayout);
        pnl_navigatorLayout.setHorizontalGroup(
            pnl_navigatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_navigatorLayout.createSequentialGroup()
                .addComponent(jXTaskPaneContainer1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnl_navigatorLayout.setVerticalGroup(
            pnl_navigatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jXTaskPaneContainer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(pnl_navigator, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 89, -1, 451));

        jButton11.setText("Sync with community");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 180, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/MainBack.png"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 540));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        crdLayout.show(pnl_body, "card2");
        loadCurrentPlaylist();
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        crdLayout.show(pnl_body, "card3");
        loadLibraryList();
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        crdLayout.show(pnl_body, "card4");
        loadTimeSlots();
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        crdLayout.show(pnl_body, "card5");
        loadMostPlayedSongs();
    }//GEN-LAST:event_jToggleButton4ActionPerformed

    private void jToggleButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton5ActionPerformed
        crdLayout.show(pnl_body, "card6");
    }//GEN-LAST:event_jToggleButton5ActionPerformed

    private void jToggleButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton7ActionPerformed
        crdLayout.show(pnl_body, "card8");
        loadAppList();

    }//GEN-LAST:event_jToggleButton7ActionPerformed

    private void btn_crt_libActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_crt_libActionPerformed
        //get name for the new library from the user
        String libItem = JOptionPane.showInputDialog("Enter library name: ");
        if (libItem == null) {

        } else if (libItem.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Given name is empty or invalid!");
        } else {
            try {
                //check whether the library is already exist with the given name?
                ResultSet rs1 = JDBC.getData("SELECT * FROM MEDIA_LIBRARY WHERE USER_ID=" + userId + " AND NAME='" + libItem + "'");
                //if not exist
                if (!rs1.next()) {
                    try {
                        ResultSet rs2 = JDBC.getData("SELECT MAX(LIBRARY_ID)+1 FROM MEDIA_LIBRARY");
                        rs2.next();
                        int nextLibIndex = rs2.getInt(1);
                        JDBC.setData("INSERT INTO MEDIA_LIBRARY(USER_ID,LIBRARY_ID,NAME) VALUES(" + userId + "," + nextLibIndex + ",'" + libItem + "')");
                        dlm.addElement(libItem);
                    } catch (Exception e) {
                        System.out.println(e);
                    }
                    //if exist
                } else {
                    JOptionPane.showMessageDialog(this, "Library name is already exist!");
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        }


    }//GEN-LAST:event_btn_crt_libActionPerformed

    private void btn_rmv_libActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_rmv_libActionPerformed
        if (lst_library.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select any library to remove!");
        } else {
            try {
                int selItem = lst_library.getSelectedIndex();
                JDBC.setData("DELETE FROM MEDIA_LIBRARY WHERE USER_ID=" + userId + " AND NAME='" + lst_library.getSelectedValue().toString() + "'");
                dlm.removeElementAt(selItem);
            } catch (Exception e) {
                System.out.println(e);
            }
            loadFolderList();
        }

    }//GEN-LAST:event_btn_rmv_libActionPerformed

    private void btn_addFldrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addFldrActionPerformed
        if (lst_library.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(this, "Select any library to add folders!");
        } else {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File path = fileChooser.getSelectedFile();

                try {
                    JDBC.startTransaction();
                    ResultSet rs1 = JDBC.getData("SELECT * FROM FOLDER WHERE FOLDER_PATH='" + path.getPath() + "'");

                    ResultSet rs3 = JDBC.getData("SELECT LIBRARY_ID FROM MEDIA_LIBRARY WHERE NAME='" + lst_library.getSelectedValue().toString() + "'");
                    rs3.next();
                    int libID = rs3.getInt("LIBRARY_ID");
                    if (rs1.next()) {
                        int fldrId = rs1.getInt("FOLDER_ID");
                        ResultSet rs4 = JDBC.getData("SELECT * FROM LIBRARY_FOLDER WHERE LIBRARY_ID=" + libID + " AND FOLDER_ID=" + fldrId);
                        if (rs4.next()) {
                            JOptionPane.showMessageDialog(this, "This folder is already exist\nin this library!");
                            loadFolderList();
                        } else {
                            JDBC.setData("INSERT INTO LIBRARY_FOLDER VALUES(" + libID + "," + fldrId + ")");
                            loadFolderList();
                        }
                    } else {
                        ResultSet rs2 = JDBC.getData("SELECT MAX(FOLDER_ID)+1 FROM FOLDER");
                        rs2.next();
                        int nextFolderIndex = rs2.getInt(1);
                        JDBC.setData("INSERT INTO FOLDER VALUES(" + nextFolderIndex + ",'" + path.getPath().replace("\\", "&") + "')");

                        JDBC.setData("INSERT INTO LIBRARY_FOLDER VALUES(" + libID + "," + nextFolderIndex + ")");

                        lbl_loader.setVisible(true);
                        LibraryManager.extractFiles(path, new String[]{"mp3"}, nextFolderIndex);

                        loadFolderList();

                    }
                    JDBC.commitTransaction();
                    lbl_loader.setVisible(false);
                } catch (Exception e) {

                    if (JOptionPane.showConfirmDialog(this, "Some files have problems while reading!\n" + e + "\n\nDo you want to continue without those files?", "Error!!! ", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE) == JOptionPane.YES_OPTION) {
                        JDBC.commitTransaction();
                        System.out.println("commit");
                        loadFolderList();
                    } else {
                        JDBC.rollbackTransaction();
                    }
                    lbl_loader.setVisible(false);
                }
            }

        }
    }//GEN-LAST:event_btn_addFldrActionPerformed

    private void lst_libraryValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lst_libraryValueChanged

        loadFolderList();
    }//GEN-LAST:event_lst_libraryValueChanged

    private void lst_libraryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lst_libraryMouseClicked

    }//GEN-LAST:event_lst_libraryMouseClicked

    private void btn_rmv_fldrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_rmv_fldrActionPerformed
        if (!lst_library.isSelectionEmpty()) {
            try {
                JDBC.setData("DELETE FROM LIBRARY_FOLDER WHERE LIBRARY_ID=" + libraryId + " AND FOLDER_ID=" + Integer.parseInt(tbl_folders.getValueAt(tbl_folders.getSelectedRow(), 1).toString()));
                loadFolderList();
            } catch (Exception e) {
                System.out.println(e);
                System.out.println("in remove folder button");
            }
        }
    }//GEN-LAST:event_btn_rmv_fldrActionPerformed

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed

        FileFilter filter = new FileNameExtensionFilter("executable", "exe");
        fileChooser.setFileFilter(filter);
        fileChooser.setCurrentDirectory(fileChooser.getCurrentDirectory());
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String name = fileChooser.getSelectedFile().getName();
            String path = fileChooser.getSelectedFile().getPath();

            DefaultTableModel dtm = (DefaultTableModel) tbl_applist.getModel();
            Vector v = new Vector();
            v.add(name);
            v.add(path);
            dtm.addRow(v);

            updateAppsInDB();

        }
    }//GEN-LAST:event_btn_addActionPerformed

    private void btn_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_removeActionPerformed
        if (tbl_applist.getSelectedRow() != -1) {
            ((DefaultTableModel) tbl_applist.getModel()).removeRow(tbl_applist.getSelectedRow());
            updateAppsInDB();
        } else {
            JOptionPane.showMessageDialog(this, "Select any application to remove!");
        }
    }//GEN-LAST:event_btn_removeActionPerformed

    private void btn_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_upActionPerformed
        if (tbl_applist.getSelectedRow() != -1 && tbl_applist.getSelectedRow() != 0) {
            DefaultTableModel model = (DefaultTableModel) tbl_applist.getModel();
            int[] rows = tbl_applist.getSelectedRows();
            model.moveRow(rows[0], rows[rows.length - 1], rows[0] - 1);
            tbl_applist.setRowSelectionInterval(rows[0] - 1, rows[rows.length - 1] - 1);
            updateAppsInDB();
        } else if (tbl_applist.getSelectedRow() == 0) {
            JOptionPane.showMessageDialog(this, "Selected application is at the top!");
        } else {
            JOptionPane.showMessageDialog(this, "Select any application to move up!");
        }
    }//GEN-LAST:event_btn_upActionPerformed

    private void btn_downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_downActionPerformed
        if (tbl_applist.getSelectedRow() != -1 && tbl_applist.getSelectedRow() != tbl_applist.getRowCount() - 1) {
            DefaultTableModel model = (DefaultTableModel) tbl_applist.getModel();
            int[] rows = tbl_applist.getSelectedRows();
            model.moveRow(rows[0], rows[rows.length - 1], rows[0] + 1);
            tbl_applist.setRowSelectionInterval(rows[0] + 1, rows[rows.length - 1] + 1);
            updateAppsInDB();
        } else if (tbl_applist.getSelectedRow() == tbl_applist.getRowCount() - 1) {
            JOptionPane.showMessageDialog(this, "Selected application is at the bottom!");

        } else {
            JOptionPane.showMessageDialog(this, "Select any application to move down!");
        }
    }//GEN-LAST:event_btn_downActionPerformed

    private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
        System.out.println("Minimized!");
        setVisible(false);

    }//GEN-LAST:event_formWindowIconified

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int option = JOptionPane.showConfirmDialog(rootPane, "Do you want to exit?", "Exit", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jToggleButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton6ActionPerformed
        crdLayout.show(pnl_body, "card7");
    }//GEN-LAST:event_jToggleButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        if (JOptionPane.showConfirmDialog(this, "Do you really want to reset to default?", "Attention!!!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            try {
                JDBC.setData("DELETE FROM application");
                JDBC.setData("DELETE FROM media_library");
                JDBC.setData("DELETE FROM folder");
                JDBC.setData("DELETE FROM time_slot");
                JDBC.setData("DELETE FROM application");

            } catch (Exception e) {
                System.out.println(e);
            }
            JOptionPane.showMessageDialog(this, "Complete the resetting process!", "Done!", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void txt_mp3FilePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_mp3FilePathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_mp3FilePathActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        try {
            Runtime.getRuntime().exec("E:\\The KMPlayer\\KMPlayer.exe " + fileList);

        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        if(isConnected()){
            readRSSFeed();
        }else{
            JOptionPane.showMessageDialog(this, "Connection timeout is expired,\ncheck your connection!");
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        JFileChooser mp3FileChooser = new JFileChooser("F:\\Musics");
        mp3FileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        mp3FileChooser.setFileFilter(new FileNameExtensionFilter("Audio Files", new String[]{"mp3"}));
        if (mp3FileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File tagFile = mp3FileChooser.getSelectedFile();
            txt_mp3FilePath.setText(tagFile.getAbsolutePath());
            AudioFileTagger aft = new AudioFileTagger(tagFile);
            txt_title.setText(aft.getTitle());
            txt_artist.setText(aft.getArtist());
            txt_album.setText(aft.getAlbum());
            txt_genre.setText(aft.getGenre());
            txt_composer.setText(aft.getComposer());
            txt_year.setText(aft.getYear());
            slider_ratings.setValue(Integer.valueOf(aft.getRating()).intValue() / 42);
            lbl_cover.setIcon(aft.getImage());

        }


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        txt_title.setText(null);
        txt_artist.setText(null);
        txt_album.setText(null);
        txt_genre.setText(null);
        txt_composer.setText(null);
        txt_year.setText(null);
        slider_ratings.setValue(0);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (!txt_mp3FilePath.getText().isEmpty()) {
            AudioFileTagger aft = new AudioFileTagger(new File(txt_mp3FilePath.getText()));
            aft.setTitle(txt_title.getText());
            aft.setArtist(txt_artist.getText());
            aft.setAlbum(txt_album.getText());
            aft.setComposer(txt_composer.getText());
            aft.setGenre(txt_genre.getText());
            aft.setYear(txt_year.getText());
            aft.setRating(String.valueOf(slider_ratings.getValue()));
            aft.setImage(imageFile);
            try {
                aft.writeTag();
                JOptionPane.showMessageDialog(this, "Tag has been saved!");
            } catch (Exception e) {
                System.out.println(e);
                JOptionPane.showMessageDialog(this, "Error was occured during tag writing!");
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void cmb_summaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_summaryActionPerformed
        if (cmb_summary.getSelectedItem().toString().equals("Most Played Songs")) {
            loadMostPlayedSongs();
        } else if (cmb_summary.getSelectedItem().toString().equals("Most Played Artists")) {
            loadMostPlayedArtists();
        } else if (cmb_summary.getSelectedItem().toString().equals("Most Played Genres")) {
            loadMostPlayedGenres();
        }


    }//GEN-LAST:event_cmb_summaryActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        
        if(isConnected()){
            new SyncDialog(this, false, username).setVisible(true);
        }else{
            JOptionPane.showMessageDialog(this, "Connection timeout is expired,\ncheck your connection!");
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new TimeSlotManipulateDialog(this, false).setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        if (!(tbl_timeslots.getSelectedRow() == -1)) {

            try {
                JDBC.setData("DELETE FROM time_slot WHERE user_id=" + userId + " AND title='" + tbl_timeslots.getValueAt(tbl_timeslots.getSelectedRow(), 0).toString() + "'");
                JOptionPane.showMessageDialog(this, "Selected time slot has been removed!");
                loadTimeSlots();
            } catch (Exception e) {
                System.out.println(e);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select any time slot!");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jToggleButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton8ActionPerformed
        crdLayout.show(pnl_body, "card9");
    }//GEN-LAST:event_jToggleButton8ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        try {
            Properties p = new Properties();
            p.load(new FileInputStream("src/settings/" + username + ".properties"));
            p.setProperty("rss_link", txt_rsslink.getText());
            p.setProperty("isRssNotify", String.valueOf(chk_rss.isSelected()));
            p.setProperty("isCommunityNotify", String.valueOf(chk_comm.isSelected()));
            p.store(new FileOutputStream("src/settings/" + username + ".properties"), "Update");
            JOptionPane.showMessageDialog(this, "Settings has been saved!");
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        
        if(isConnected()){
            CommunitySuggestNew();
        }else{
            JOptionPane.showMessageDialog(this, "Connection timeout is expired,\ncheck your connection!");
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        JFileChooser pathChooser = new JFileChooser();
        pathChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (pathChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            txt_backup_path.setText(pathChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        if(txt_backup_path.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Select a path to save the backup!");
        }else{
            try {
                Process p = Runtime.getRuntime().exec("C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin\\mysqldump.exe -u root -padmin mediaorg > "+txt_backup_path.getText());
                
                JOptionPane.showMessageDialog(this, "Your system backup is ready!");
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        JFileChooser pathChooser = new JFileChooser();
        pathChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (pathChooser.showDialog(this, "Select") == JFileChooser.APPROVE_OPTION) {
            txt_restore_path.setText(pathChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        JFileChooser imageChooser = new JFileChooser();
        imageChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if(imageChooser.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            imageFile = imageChooser.getSelectedFile();
            lbl_cover.setIcon(new ImageIcon(imageFile.getAbsolutePath()));
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(new WindowsLookAndFeel());
        } catch (Exception e) {
            System.out.println(e);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_addFldr;
    private javax.swing.JButton btn_crt_lib;
    private javax.swing.JButton btn_down;
    private javax.swing.JButton btn_remove;
    private javax.swing.JButton btn_rmv_fldr;
    private javax.swing.JButton btn_rmv_lib;
    private javax.swing.JButton btn_up;
    private javax.swing.ButtonGroup btngrp_navi;
    private javax.swing.JCheckBox chk_comm;
    private javax.swing.JCheckBox chk_rss;
    private javax.swing.JComboBox cmb_summary;
    private javax.swing.JLabel eq_label;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JToggleButton jToggleButton5;
    private javax.swing.JToggleButton jToggleButton6;
    private javax.swing.JToggleButton jToggleButton7;
    private javax.swing.JToggleButton jToggleButton8;
    private org.jdesktop.swingx.JXTaskPane jXTaskPane1;
    private org.jdesktop.swingx.JXTaskPane jXTaskPane2;
    private org.jdesktop.swingx.JXTaskPane jXTaskPane3;
    private org.jdesktop.swingx.JXTaskPaneContainer jXTaskPaneContainer1;
    private javax.swing.JLabel lbl_cover;
    private javax.swing.JLabel lbl_loader;
    private javax.swing.JList lst_bgapps;
    private javax.swing.JList lst_library;
    private javax.swing.JPanel pnl_applications;
    private javax.swing.JPanel pnl_body;
    private javax.swing.JPanel pnl_current;
    private javax.swing.JPanel pnl_libraries;
    private javax.swing.JPanel pnl_navigator;
    private javax.swing.JPanel pnl_preferences;
    private javax.swing.JPanel pnl_settings;
    private javax.swing.JPanel pnl_statistics;
    private javax.swing.JPanel pnl_tageditor;
    private javax.swing.JPanel pnl_timeslot;
    private javax.swing.JSlider slider_ratings;
    private javax.swing.JTable tbl_applist;
    private javax.swing.JTable tbl_folders;
    private javax.swing.JTable tbl_playlist;
    private javax.swing.JTable tbl_summary;
    private javax.swing.JTable tbl_timeslots;
    private javax.swing.JTextField txt_album;
    private javax.swing.JTextField txt_artist;
    private javax.swing.JTextField txt_backup_path;
    private javax.swing.JTextField txt_composer;
    private javax.swing.JLabel txt_file;
    private javax.swing.JTextField txt_genre;
    private javax.swing.JTextField txt_mp3FilePath;
    private javax.swing.JTextField txt_nowplaying;
    private javax.swing.JTextField txt_restore_path;
    private javax.swing.JTextField txt_rsslink;
    private javax.swing.JTextField txt_title;
    private javax.swing.JTextField txt_year;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mediaPlayed(String application, String file) {
        txt_nowplaying.setText(file);
        List<String> appList = getBgAppList();
        DefaultListModel deflm = new DefaultListModel();
        for (String s : appList) {
            deflm.addElement(s);
        }
        lst_bgapps.setModel(deflm);

        int fid = getMediaFileId(file);
        int tid = getTimeSlotId();
        int appId = getApplicationId();

        try {
            ResultSet rs = JDBC.getData("SELECT event_id FROM event_log WHERE media_id=" + fid + " AND timeslot_id=" + tid + " AND application_id=" + appId);
            if (rs.next()) {
                JDBC.setData("UPDATE event_log SET frequency=frequency+1 WHERE event_id=" + rs.getInt("event_id"));
            } else {
                ResultSet rs2 = JDBC.getData("SELECT MAX(event_id)+1 AS nextId FROM event_log");
                rs2.next();
                JDBC.setData("INSERT INTO event_log VALUES(" + rs2.getInt("nextId") + "," + tid + "," + appId + "," + fid + ",1)");
            }
        } catch (Exception e) {
            System.out.println(e);
        }

        loadCurrentPlaylist();
        //System.out.println(tid);
        //System.out.println(appId);
        //System.out.println(fid);
        //updateEventLog(file);
    }

    private void loadLibraryList() {
        dlm = new DefaultListModel();
        lst_library.setModel(dlm);
        try {
            ResultSet rs = JDBC.getData("SELECT * FROM MEDIA_LIBRARY WHERE USER_ID=" + userId);
            dlm.removeAllElements();
            while (rs.next()) {
                dlm.addElement(rs.getString("NAME"));
            }
        } catch (Exception e) {
            System.out.println(e);
            System.out.println("in loadLibraryList() method");
        }
    }

    private void loadFolderList() {
        removeAllFrom(tbl_folders);
        dtm = (DefaultTableModel) tbl_folders.getModel();
        try {
            ResultSet rs3 = JDBC.getData("SELECT LIBRARY_ID FROM MEDIA_LIBRARY WHERE NAME='" + lst_library.getSelectedValue().toString() + "'");
            rs3.next();
            libraryId = rs3.getInt(1);
            ResultSet rs = JDBC.getData("SELECT FOLDER_PATH,FOLDER.FOLDER_ID FROM FOLDER,LIBRARY_FOLDER WHERE FOLDER.FOLDER_ID=LIBRARY_FOLDER.FOLDER_ID AND LIBRARY_ID=" + libraryId);

            while (rs.next()) {
                Vector pathrow = new Vector();
                pathrow.add(rs.getString("FOLDER_PATH").replace("&", "\\"));
                pathrow.add(rs.getString("FOLDER_ID"));
                dtm.addRow(pathrow);
            }

        } catch (Exception e) {
            System.out.println(e);
            System.out.println("in loadFolderList() method");
        }
    }

    private List<String> getBgAppList() {
        List<Wnd> wndList = com.jniwrapper.win32.process.Process.getApplicationWindows();
        List<com.jniwrapper.win32.process.Process> procList = com.jniwrapper.win32.process.Process.getProcesses();
        List<String> returnList = new ArrayList<>();
        for (com.jniwrapper.win32.process.Process p : procList) {
            for (Wnd w : wndList) {
                if (p.getProcessID() == w.getProcessId()) {
                    returnList.add(p.getProcessFileName());
                }
            }
        }
        return returnList;
    }

    private int getUserId(String name) {
        int id = 0;
        try {
            ResultSet rs = JDBC.getData("SELECT * FROM users WHERE username='" + name + "'");
            rs.next();
            id = rs.getInt("user_id");
        } catch (Exception e) {
            System.out.println(e);
        }
        return id;
    }

    private void updateAppsInDB() {
        try {
            JDBC.setData("DELETE FROM user_application WHERE user_id=" + userId);
            for (int i = 0; i < tbl_applist.getRowCount(); i++) {
                ResultSet rs = JDBC.getData("SELECT * FROM application WHERE file_path='" + tbl_applist.getValueAt(i, 1).toString().replace("\\", "&") + "'");

                if (!rs.next()) {
                    ResultSet rs2 = JDBC.getData("SELECT MAX(application_id)+1 AS nxtid FROM application");
                    rs2.next();
                    int nxtId = rs2.getInt("nxtid");
                    JDBC.setData("INSERT INTO application VALUES(" + nxtId + ",'" + tbl_applist.getValueAt(i, 1).toString().replace("\\", "&") + "')");
                    JDBC.setData("INSERT INTO user_application VALUES(" + userId + "," + nxtId + "," + (i + 1) + ")");
                } else {
                    JDBC.setData("INSERT INTO user_application VALUES(" + userId + "," + rs.getInt("application_id") + "," + (i + 1) + ")");
                }
            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private int getTimeSlotId() {
        int tid = 0;
        Calendar c = new GregorianCalendar();
        int hour = c.get(Calendar.HOUR_OF_DAY);

        try {
            ResultSet rs = JDBC.getData("SELECT * FROM time_slot WHERE start_time <=" + hour + " AND end_time >" + hour + " AND user_id =" + userId);

            while (rs.next()) {
                tid = rs.getInt("timeslot_id");
            }

        } catch (Exception e) {
            System.out.println(e);
        }
        return tid;
    }

    private int getApplicationId() {
        int priority = 999;
        int aid = 0;
        List<String> appList = getBgAppList();
        try {
            ResultSet rs = JDBC.getData("SELECT application.application_id AS id, application.file_path AS path, user_application.priority AS priority FROM application, user_application WHERE application.application_id=user_application.application_id AND user_application.user_id=" + userId);

            while (rs.next()) {
                for (String s : appList) {

                    if (s.equals(rs.getString("path").replace("&", "\\"))) {

                        int p = rs.getInt("priority");
                        int a = rs.getInt("id");

                        if (priority > p) {
                            priority = p;
                            aid = a;
                        }
                    }
                }
            }

        } catch (Exception ex) {
            System.out.println(ex);
        }

        return aid;
    }

    private void loadAppList() {
        removeAllFrom(tbl_applist);
        DefaultTableModel dtm = (DefaultTableModel) tbl_applist.getModel();

        try {
            ResultSet rs = JDBC.getData("SELECT application.application_id AS id, application.file_path AS path, user_application.priority AS priority FROM application, user_application WHERE application.application_id=user_application.application_id AND user_application.user_id=" + userId);

            while (rs.next()) {
                Vector v = new Vector();
                String x[] = rs.getString("path").split("&");
                v.add(x[x.length - 1]);

                v.add(rs.getString("path").replace("&", "\\"));
                dtm.addRow(v);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private int getMediaFileId(String file) {
        File folder_path = new File(file).getParentFile();
        int file_id = -1;
        try {
            ResultSet rs = JDBC.getData("SELECT folder_path,folder_id FROM folder WHERE folder_id IN (SELECT folder_id FROM library_folder WHERE library_id IN(SELECT library_id FROM media_library WHERE user_id=" + userId + " ))");
            while (rs.next()) {
                while (rs.getString("folder_path").replace("&", "\\").equals(folder_path.getPath())) {
                    ResultSet rs2 = JDBC.getData("SELECT file_id,file_path FROM media_file WHERE folder_id=" + rs.getInt("folder_id"));
                    while (rs2.next()) {
                        if (rs2.getString("file_path").replace("&", "\\").equals(file)) {
                            file_id = rs2.getInt("file_id");
                            break;
                        }
                    }

                    folder_path = folder_path.getParentFile();
                }
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return file_id;
    }

    private void loadCurrentPlaylist() {
        
        removeAllFrom(tbl_playlist);
        try {
            ResultSet rs = JDBC.getData("SELECT * FROM event_log, media_file WHERE media_id=file_id AND timeslot_id=" + getTimeSlotId() + " ORDER BY frequency DESC");

            DefaultTableModel dtm = (DefaultTableModel) tbl_playlist.getModel();
            int playListCount = 10;
            fileList = "";
            
            while (rs.next()) {
                
                if (playListCount == 0) {
                    break;
                }
                playListCount--;
                File file = new File(rs.getString("file_path").replace("&", "\\"));

                fileList += " ";
                fileList += "\"" + file.getAbsolutePath() + "\"";
                System.out.println(file.getAbsoluteFile());
                Vector v = new Vector();
                Vector v1 = new Vector();
                v.add(file.getName());
                v.add(rs.getString("title"));
                 
                v.add(rs.getString("frequency"));
                
                dtm.addRow(v);

            }
            playlistModel = dtm;
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void makeSystemTray() {
        if (SystemTray.isSupported()) {
            PopupMenu popup = new PopupMenu();
            TrayIcon trayIcon = new TrayIcon(new ImageIcon("src/images/bulb.gif").getImage());
            SystemTray tray = SystemTray.getSystemTray();

            // Create a pop-up menu components
            MenuItem aboutItem = new MenuItem("About");
            CheckboxMenuItem cb1 = new CheckboxMenuItem("Set auto size");
            CheckboxMenuItem cb2 = new CheckboxMenuItem("Set tooltip");
            Menu displayMenu = new Menu("Display");
            MenuItem playlistItem = new MenuItem("Playlist");
            MenuItem warningItem = new MenuItem("Warning");
            MenuItem infoItem = new MenuItem("Info");
            MenuItem noneItem = new MenuItem("None");
            MenuItem exitItem = new MenuItem("Exit");

            //Add components to pop-up menu
            popup.add(aboutItem);
            popup.addSeparator();
            popup.add(cb1);
            popup.add(cb2);
            popup.addSeparator();
            popup.add(displayMenu);
            displayMenu.add(playlistItem);
            displayMenu.add(warningItem);
            displayMenu.add(infoItem);
            displayMenu.add(noneItem);
            popup.add(exitItem);
            

            trayIcon.setPopupMenu(popup);
            trayIcon.setToolTip("MediaOrg");
            trayIcon.addMouseListener(new MouseAdapter() {

                @Override
                public void mouseClicked(MouseEvent e) {
                    Frame f = getFrames()[1];
                    f.setVisible(true);
                    f.setState(NORMAL);

                }

            });

            try {
                tray.add(trayIcon);
            } catch (Exception e) {
                System.out.println(e);
            }
        } else {
            System.out.println("SystemTray is not supported!");
        }
    }

    private void removeAllFrom(JTable tbl) {
        DefaultTableModel model = (DefaultTableModel) tbl.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
    }

    public void loadTimeSlots() {

        removeAllFrom(tbl_timeslots);

        DefaultTableModel model = (DefaultTableModel) tbl_timeslots.getModel();

        try {
            ResultSet rs = JDBC.getData("SELECT * FROM time_slot WHERE user_id=" + userId);
            while (rs.next()) {
                Vector v = new Vector();
                v.addElement(rs.getString("title"));
                //v.addElement(Integer.valueOf(rs.getString("end_time")));
                
                int s = Integer.valueOf(rs.getString("start_time"));
                int e = Integer.valueOf(rs.getString("end_time"));
                
                if(s>12){
                    s=s-12;
                    v.addElement(s+" PM");
                }else if (s==0){
                    v.addElement(12+" AM");
                }else if(s==12){
                    v.addElement(12 + " PM");
                }else{
                    v.addElement(s + " AM");
                }
                if(e>12){
                    e=e-12;
                    v.addElement(e+" PM");
                }else if(e==0){
                    v.addElement(12+" AM");
                }else if(e==12){
                    v.addElement(12 + " PM");
                }else{
                    v.addElement(e+ " AM");
                }
                model.addRow(v);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void readRSSFeed() {
        try {
            executePost(rssLink, "");
            File fXmlFile = new File("src/frames/myrss.xml");
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(fXmlFile);
            //doc.getDocumentElement().normalize();

            NodeList nList = doc.getElementsByTagName("item");

            Notification[] downloadList = new Notification[nList.getLength()];
            for (int i = 0; i < downloadList.length; i++) {
                downloadList[i] = new Notification();
            }

            for (int i = 0; i < nList.getLength(); i++) {
                Node list = nList.item(i);
                Element e = (Element) list;
                downloadList[i].setTitle(e.getElementsByTagName("title").item(0).getTextContent());
                downloadList[i].setLink(e.getElementsByTagName("link").item(0).getTextContent());

            }
            NotificationBox nBox = new NotificationBox(this, false, downloadList);
            nBox.setRSSNotificationList(downloadList);
            nBox.setVisible(true);

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public String executePost(String targetURL, String urlParameters) {
        HttpURLConnection connection = null;
        try {
            //Create connection
            URL url = new URL(targetURL);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type",
                    "application/x-www-form-urlencoded");

            connection.setRequestProperty("Content-Length",
                    Integer.toString(urlParameters.getBytes().length));
            connection.setRequestProperty("Content-Language", "en-US");

            connection.setUseCaches(false);
            connection.setDoOutput(true);

            //Send request
            DataOutputStream wr = new DataOutputStream(
                    connection.getOutputStream());
            wr.writeBytes(urlParameters);
            wr.close();

            //Get Response  
            InputStream is = connection.getInputStream();
            BufferedReader rd = new BufferedReader(new InputStreamReader(is));
            StringBuilder response = new StringBuilder(); // or StringBuffer if not Java 5+ 
            String line;
            File f = new File("src/frames/myrss.xml");
            f.createNewFile();
            PrintWriter pw = new PrintWriter(f);
            while ((line = rd.readLine()) != null) {
                pw.println(line);
                //System.out.println(line);
                //response.append(line);
                //response.append('\r');
            }

            pw.flush();
            rd.close();

            return response.toString();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
    }

    private void loadMostPlayedSongs() {
        removeAllFrom(tbl_summary);
        DefaultTableModel dtm = (DefaultTableModel) tbl_summary.getModel();

        try {
            ResultSet rs = JDBC.getData("SELECT media_file.title, SUM(event_log.frequency) AS frequency FROM event_log,media_file WHERE event_log.event_id = media_file.file_id GROUP BY event_log.media_id ORDER BY frequency DESC");
            while (rs.next()) {
                Vector v = new Vector();
                v.addElement(rs.getString("title"));
                v.addElement(rs.getString("frequency"));
                dtm.addRow(v);
            }
        } catch (Exception e) {
            System.out.println(e);
        }

    }

    private void loadMostPlayedArtists() {
        removeAllFrom(tbl_summary);
        DefaultTableModel dtm = (DefaultTableModel) tbl_summary.getModel();

        try {
            ResultSet rs = JDBC.getData("SELECT media_file.artist, SUM(event_log.frequency) AS frequency FROM event_log,media_file WHERE event_log.event_id = media_file.file_id GROUP BY media_file.artist ORDER BY frequency DESC");
            while (rs.next()) {
                Vector v = new Vector();
                v.addElement(rs.getString("artist"));
                v.addElement(rs.getString("frequency"));
                dtm.addRow(v);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void loadMostPlayedGenres() {
        removeAllFrom(tbl_summary);
        DefaultTableModel dtm = (DefaultTableModel) tbl_summary.getModel();

        try {
            ResultSet rs = JDBC.getData("SELECT media_file.genre, SUM(event_log.frequency) AS frequency FROM event_log,media_file WHERE event_log.event_id = media_file.file_id GROUP BY media_file.genre ORDER BY frequency DESC");
            while (rs.next()) {
                Vector v = new Vector();
                v.addElement(rs.getString("genre"));
                v.addElement(rs.getString("frequency"));
                dtm.addRow(v);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void CommunitySuggestNew() {

        Calendar cal = new GregorianCalendar().getInstance();
        int u_hour = cal.get(Calendar.HOUR_OF_DAY);

        
        String u_Application = "netbeans";
        String u_Genry = "rock";

        Properties p = new Properties();
        try {
            p.load(new FileInputStream("src/settings/" + username + ".properties"));
            sendPost1(u_hour, u_Application, u_Genry, Integer.valueOf(p.getProperty("syncId")));
        } catch (Exception ex) {
            System.out.println(ex);
        }

        try {

        } catch (Exception ex) {
            System.out.println(ex);
        }

    }

    public void sendPost1(int u_hour, String u_application, String u_genry, int uid) throws Exception {
        String hour = Integer.toString(u_hour);
        String application = u_application;
        String genry = u_genry;
        String user_id = String.valueOf(uid);
        String line = null;
        String url = " http://ravindalakshan-learningwithme.rhcloud.com/suggestnew.php";//php-learningwithme.rhcloud.com/first.php
        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setDoOutput(true);
        PrintStream ps = new PrintStream(con.getOutputStream());
        ps.print("hour=" + u_hour + "");
        ps.print("&application=" + application + "");
        ps.print("&user_id=" + user_id + "");

        ps.close();

        InputStreamReader in = new InputStreamReader(con.getInputStream());
        Scanner sc = new Scanner(in);
        sc.useDelimiter(";");
        sc.next();

        
        ArrayList<String> alist = new ArrayList<>();

        while (sc.hasNext()) {
            alist.add(sc.next());
        }

        Notification[] comNot = new Notification[alist.size()];
        
        for (int i = 0; i < comNot.length; i++) {
            comNot[i] = new Notification();
        }

        for (int i = 0; i < alist.size(); i++) {

            comNot[i].setTitle(alist.get(i));
            comNot[i].setLink("http://www.youtube.com/results?search_query=" + (alist.get(i).substring(0, alist.get(i).indexOf(" by"))).replace(" ", "+"));
            //System.out.println(alist.get(i).substring(0, alist.get(i).indexOf(" by")));
        }
        
        if(comNot.length==0){
            JOptionPane.showMessageDialog(this, "There are no any suggestions in this time slot!");
        }else{
        
        NotificationBox comBox = new NotificationBox(this, false, comNot);
        
        comBox.setCommunityNotification(comNot);

        comBox.setVisible(true);
        }
    }

    private void loadSettings() {
        Properties p = new Properties();
        try {
            p.load(new FileInputStream("src/settings/" + username + ".properties"));
            this.rssLink = p.getProperty("rss_link");
            txt_rsslink.setText(p.getProperty("rss_link"));
            this.isRssNotify = Boolean.valueOf(p.getProperty("isRssNotify"));
            chk_rss.setSelected(Boolean.valueOf(p.getProperty("isRssNotify")));
            this.isCommunityNotify = Boolean.valueOf(p.getProperty("isCommunityNotify"));
            chk_comm.setSelected(Boolean.valueOf(p.getProperty("isCommunityNotify")));
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }

    private void loadPlaylistPopup(DefaultTableModel playlistModel) {
        new PlaylistBox(null, false, playlistModel).setVisible(true);
    }
    
    

    private boolean isConnected() {

        Socket socket = null;
        boolean reachable = false;
        try {
            socket = new Socket("www.google.lk", 80);
            reachable = true;
        }catch(Exception e){
            System.out.println("Error");
            if(socket!=null){
                try {
                    socket.close();
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        }
        return reachable;
    }

}
